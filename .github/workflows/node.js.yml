# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# It will also build a Docker image and push it to DockerHub
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI with Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4

    # Step 1: Setup Node.js with the specified version
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    # Step 2: Install dependencies
    - run: npm ci

    # Step 3: Build the application (if applicable)
    - run: npm run build --if-present
    
    # Step 4: Run tests
    - run: npm test

    # Step 5: Login to DockerHub
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Step 6: Build and push Docker image
    - name: Build and push Docker image
      run: |
        docker build -t your-dockerhub-username/your-repo-name:${{ github.sha }} .
        docker push your-dockerhub-username/your-repo-name:${{ github.sha }}

    # Step 7: Tag the Docker image as 'latest' (optional)
    - name: Tag Docker image as latest
      run: |
        docker tag your-dockerhub-username/your-repo-name:${{ github.sha }} your-dockerhub-username/your-repo-name:latest
        docker push your-dockerhub-username/your-repo-name:latest
